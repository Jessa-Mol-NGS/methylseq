nextflow_pipeline {
    name "Test Workflow main.nf - Special Input Scenarios"
    script "../main.nf"
    config "./nextflow.config"

    // Define special input test scenarios
    def testScenarios = [
        [
            name: "bismark_cat_fastq_skip_trimming_skip_deduplication",
            description: "Params: bismark | CAT_FASTQ | skip_trimming | skip_deduplication",
            tag: "cpu",
            params: [
                input: "samplesheet_replicates.csv",
                skip_trimming: true,
                skip_deduplication: true
            ]
        ],
        [
            name: "bwameth_cat_fastq_skip_trimming_skip_deduplication",
            description: "Params: bwameth | CAT_FASTQ | skip_trimming | skip_deduplication",
            tag: "cpu",
            params: [
                input: "samplesheet_replicates.csv",
                aligner: "bwameth",
                skip_trimming: true,
                skip_deduplication: true
            ]
        ],
        [
            name: "bwameth_use_gpu",
            description: "Params: bwameth | use_gpu",
            tag: "gpu",
            params: [
                input: "samplesheet_gpu.csv",
                aligner: "bwameth" // uses parabricks/fq2bammeth
            ]
        ]
    ]

    // Common assertion function
    def runStandardAssertions = { outputDir ->
        def stable_name = getAllFilesFromDir(outputDir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
        def stable_path = getAllFilesFromDir(outputDir, ignoreFile: 'tests/.nftignore')
        def bam_files = getAllFilesFromDir(outputDir, include: ['**/*.bam'])
        
        return [
            workflow.trace.succeeded().size(),
            removeNextflowVersion("$outputDir/pipeline_info/nf_core_methylseq_software_mqc_versions.yml"),
            stable_name,
            stable_path,
            bam_files.collect{ file -> [ file.getName(), bam(file.toString()).getReadsMD5() ] }
        ]
    }

    // Generate tests for each scenario
    testScenarios.each { scenario ->
        test(scenario.description) {
            tag scenario.tag
            
            when {
                params {
                    outdir = "$outputDir"
                    // Apply scenario-specific parameters
                                         scenario.params.each { key, value ->
                         if (key == 'input') {
                             // Handle special case for input files  
                             input = "${projectDir}/assets/${value}"
                         } else {
                             delegate."$key" = value
                         }
                     }
                }
            }

            then {
                assertAll(
                    { assert workflow.success },
                    { assert snapshot(runStandardAssertions(params.outdir)).match() }
                )
            }
        }
    }
} 